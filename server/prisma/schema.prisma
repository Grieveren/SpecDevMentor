// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  avatar      String?
  role        UserRole @default(DEVELOPER)
  password    String
  isVerified  Boolean  @default(false)
  verificationToken String?
  resetToken  String?
  resetTokenExpiry DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  refreshTokens     RefreshToken[]
  ownedProjects     SpecificationProject[] @relation("ProjectOwner")
  teamMemberships   TeamMember[]
  comments          Comment[]
  auditLogs         AuditLog[]
  userProgress      UserProgress[]
  aiUsage           AIUsage[]
  reactions         Reaction[]
  authoredTemplates Template[] @relation("TemplateAuthor")
  templateUsages    TemplateUsage[] @relation("TemplateUsage")
  activities        UserActivity[]
  workflowMetrics   WorkflowMetrics[]
  skillMetrics      SkillDevelopmentMetrics[]
  notifications     Notification[]
  notificationSettings NotificationSettings?
  uploadedFiles     FileAttachment[] @relation("FileUploader")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model SpecificationProject {
  id            String              @id @default(cuid())
  name          String
  description   String?
  currentPhase  SpecificationPhase  @default(REQUIREMENTS)
  status        ProjectStatus       @default(ACTIVE)
  settings      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relationships
  owner         User                @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId       String
  team          TeamMember[]
  documents     SpecificationDocument[]
  analytics     ProjectAnalytics[]
  templateShares TemplateTeamShare[]
  templateUsages TemplateUsage[]
  workflowMetrics WorkflowMetrics[]
  teamPerformanceMetrics TeamPerformanceMetrics[]

  @@map("specification_projects")
}

model TeamMember {
  id        String           @id @default(cuid())
  role      TeamMemberRole   @default(MEMBER)
  status    TeamMemberStatus @default(ACTIVE)
  joinedAt  DateTime         @default(now())

  // Relationships
  user      User                 @relation(fields: [userId], references: [id])
  userId    String
  project   SpecificationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("team_members")
}

model SpecificationDocument {
  id            String              @id @default(cuid())
  phase         SpecificationPhase
  content       String              @db.Text
  version       Int                 @default(1)
  status        DocumentStatus      @default(DRAFT)
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relationships
  project       SpecificationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  comments      CommentThread[]
  reviews       AIReview[]
  versions      DocumentVersion[]
  attachments   FileAttachment[]

  @@unique([projectId, phase])
  @@map("specification_documents")
}

model DocumentVersion {
  id          String   @id @default(cuid())
  version     Int
  content     String   @db.Text
  changes     Json     @default("{}")
  createdAt   DateTime @default(now())
  createdBy   String

  // Relationships
  document    SpecificationDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String

  @@unique([documentId, version])
  @@map("document_versions")
}

model CommentThread {
  id          String        @id @default(cuid())
  position    Json          // { line: number, character: number }
  status      CommentStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  resolvedAt  DateTime?
  resolvedBy  String?

  // Relationships
  document    SpecificationDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  comments    Comment[]

  @@map("comment_threads")
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  editedAt    DateTime?

  // Relationships
  thread      CommentThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  reactions   Reaction[]

  @@map("comments")
}

model Reaction {
  id        String      @id @default(cuid())
  type      ReactionType
  createdAt DateTime    @default(now())

  // Relationships
  comment   Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User        @relation(fields: [userId], references: [id])
  userId    String

  @@unique([commentId, userId, type])
  @@map("reactions")
}

model AIReview {
  id              String    @id @default(cuid())
  overallScore    Float
  suggestions     Json      // AISuggestion[]
  completeness    Json      // CompletenessResult
  qualityMetrics  Json      // QualityMetrics
  createdAt       DateTime  @default(now())

  // Relationships
  document        SpecificationDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId      String
  appliedSuggestions String[] // Array of suggestion IDs

  @@map("ai_reviews")
}

model AIUsage {
  id          String    @id @default(cuid())
  action      String    // 'review', 'suggestion', 'validation'
  tokensUsed  Int
  cost        Float
  createdAt   DateTime  @default(now())

  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("ai_usage")
}

model LearningModule {
  id              String          @id @default(cuid())
  title           String
  description     String          @db.Text
  phase           SpecificationPhase?
  difficulty      DifficultyLevel
  prerequisites   String[]        // Array of module IDs
  content         Json            // LessonContent[]
  exercises       Json            // Exercise[]
  estimatedDuration Int           // in minutes
  isPublished     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  userProgress    UserProgress[]

  @@map("learning_modules")
}

model UserProgress {
  id                String              @id @default(cuid())
  status            ProgressStatus      @default(NOT_STARTED)
  completedLessons  String[]            // Array of lesson IDs
  exerciseResults   Json                @default("[]") // ExerciseResult[]
  skillAssessments  Json                @default("[]") // SkillAssessment[]
  lastAccessed      DateTime?
  completedAt       DateTime?

  // Relationships
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  module            LearningModule      @relation(fields: [moduleId], references: [id])
  moduleId          String

  @@unique([userId, moduleId])
  @@map("user_progress")
}

model ProjectAnalytics {
  id              String   @id @default(cuid())
  period          String   // 'daily', 'weekly', 'monthly'
  metrics         Json     // Analytics data
  createdAt       DateTime @default(now())

  // Relationships
  project         SpecificationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String

  @@map("project_analytics")
}

model UserActivity {
  id            String       @id @default(cuid())
  action        ActivityType
  resource      String       // 'project', 'document', 'comment', etc.
  resourceId    String
  metadata      Json         @default("{}")
  duration      Int?         // Duration in seconds
  sessionId     String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime     @default(now())

  // Relationships
  user          User         @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@map("user_activities")
}

model WorkflowMetrics {
  id                    String              @id @default(cuid())
  phase                 SpecificationPhase
  startedAt             DateTime
  completedAt           DateTime?
  timeSpent             Int?                // Time in seconds
  reviewCycles          Int                 @default(0)
  qualityScore          Float?
  collaboratorCount     Int                 @default(0)
  commentCount          Int                 @default(0)
  revisionCount         Int                 @default(0)
  aiSuggestionsApplied  Int                 @default(0)
  
  // Relationships
  project               SpecificationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId             String
  user                  User                @relation(fields: [userId], references: [id])
  userId                String

  @@unique([projectId, phase, userId])
  @@map("workflow_metrics")
}

model TeamPerformanceMetrics {
  id                    String   @id @default(cuid())
  period                String   // 'daily', 'weekly', 'monthly'
  periodStart           DateTime
  periodEnd             DateTime
  projectsCompleted     Int      @default(0)
  averageQualityScore   Float?
  averageCompletionTime Int?     // Average time in hours
  collaborationScore    Float?   // Collaboration effectiveness score
  methodologyAdoption   Float?   // Methodology adoption percentage
  metrics               Json     @default("{}")
  createdAt             DateTime @default(now())

  // Relationships
  project               SpecificationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId             String

  @@unique([projectId, period, periodStart])
  @@map("team_performance_metrics")
}

model SkillDevelopmentMetrics {
  id                String              @id @default(cuid())
  phase             SpecificationPhase?
  skillArea         String              // 'requirements', 'design', 'collaboration', etc.
  currentLevel      Float               // 0-100 skill level
  previousLevel     Float?
  improvement       Float?              // Calculated improvement
  assessmentDate    DateTime
  assessmentType    String              // 'ai_review', 'peer_review', 'self_assessment'
  evidence          Json                @default("{}")
  
  // Relationships
  user              User                @relation(fields: [userId], references: [id])
  userId            String

  @@index([userId, skillArea, assessmentDate])
  @@map("skill_development_metrics")
}

model SystemPerformanceMetrics {
  id                String   @id @default(cuid())
  metricType        String   // 'response_time', 'error_rate', 'throughput', etc.
  value             Float
  unit              String   // 'ms', 'percent', 'requests_per_second', etc.
  tags              Json     @default("{}")
  timestamp         DateTime @default(now())

  @@index([metricType, timestamp])
  @@map("system_performance_metrics")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  resourceId  String
  details     Json     @default("{}")
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  errorMessage String?
  createdAt   DateTime @default(now())

  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("audit_logs")
}

model Template {
  id            String              @id @default(cuid())
  name          String
  description   String              @db.Text
  phase         SpecificationPhase?
  category      TemplateCategory
  content       String              @db.Text
  variables     Json                @default("[]") // TemplateVariable[]
  tags          String[]
  isPublic      Boolean             @default(false)
  isOfficial    Boolean             @default(false)
  usageCount    Int                 @default(0)
  rating        Float               @default(0.0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relationships
  author        User                @relation("TemplateAuthor", fields: [authorId], references: [id])
  authorId      String
  teamShares    TemplateTeamShare[]
  usages        TemplateUsage[]

  @@map("templates")
}

model TemplateTeamShare {
  id          String   @id @default(cuid())
  permission  SharePermission @default(READ)
  createdAt   DateTime @default(now())

  // Relationships
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  project     SpecificationProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([templateId, projectId])
  @@map("template_team_shares")
}

model TemplateUsage {
  id          String   @id @default(cuid())
  rating      Int?     // 1-5 stars
  feedback    String?
  createdAt   DateTime @default(now())

  // Relationships
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  user        User     @relation("TemplateUsage", fields: [userId], references: [id])
  userId      String
  project     SpecificationProject? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId   String?

  @@unique([templateId, userId])
  @@map("template_usages")
}

model BestPracticeGuide {
  id            String              @id @default(cuid())
  title         String
  description   String              @db.Text
  phase         SpecificationPhase
  content       String              @db.Text
  tips          Json                @default("[]") // InteractiveTip[]
  examples      Json                @default("[]") // Example[]
  isActive      Boolean             @default(true)
  priority      Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("best_practice_guides")
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  title       String
  message     String            @db.Text
  data        Json              @default("{}")
  isRead      Boolean           @default(false)
  readAt      DateTime?
  createdAt   DateTime          @default(now())
  expiresAt   DateTime?

  // Relationships
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  emailEnabled          Boolean  @default(true)
  inAppEnabled          Boolean  @default(true)
  workflowEvents        Boolean  @default(true)
  commentNotifications  Boolean  @default(true)
  reviewNotifications   Boolean  @default(true)
  teamUpdates           Boolean  @default(true)
  systemAlerts          Boolean  @default(true)
  digestFrequency       DigestFrequency @default(DAILY)
  quietHoursStart       Int?     // Hour in 24h format (0-23)
  quietHoursEnd         Int?     // Hour in 24h format (0-23)
  timezone              String   @default("UTC")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique

  @@map("notification_settings")
}

model EmailQueue {
  id          String      @id @default(cuid())
  to          String
  subject     String
  htmlContent String      @db.Text
  textContent String?     @db.Text
  templateId  String?
  templateData Json       @default("{}")
  status      EmailStatus @default(PENDING)
  attempts    Int         @default(0)
  maxAttempts Int         @default(3)
  scheduledAt DateTime    @default(now())
  sentAt      DateTime?
  errorMessage String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status, scheduledAt])
  @@map("email_queue")
}

model FileAttachment {
  id              String            @id @default(cuid())
  filename        String
  originalName    String
  mimeType        String
  size            Int               // Size in bytes
  path            String            // File path on storage
  url             String?           // Public URL if applicable
  checksum        String            // File checksum for integrity
  metadata        Json              @default("{}")
  isPublic        Boolean           @default(false)
  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relationships
  uploader        User              @relation("FileUploader", fields: [uploaderId], references: [id])
  uploaderId      String
  document        SpecificationDocument? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId      String?
  versions        FileVersion[]

  @@index([uploaderId, createdAt])
  @@index([documentId, createdAt])
  @@index([mimeType])
  @@map("file_attachments")
}

model FileVersion {
  id              String            @id @default(cuid())
  version         Int
  filename        String
  path            String
  size            Int
  checksum        String
  metadata        Json              @default("{}")
  createdAt       DateTime          @default(now())

  // Relationships
  attachment      FileAttachment    @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  attachmentId    String

  @@unique([attachmentId, version])
  @@map("file_versions")
}

// Enums
enum UserRole {
  STUDENT
  DEVELOPER
  TEAM_LEAD
  ADMIN
}

enum TeamMemberRole {
  MEMBER
  LEAD
  ADMIN
}

enum TeamMemberStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum SpecificationPhase {
  REQUIREMENTS
  DESIGN
  TASKS
  IMPLEMENTATION
}

enum DocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  ARCHIVED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  SUSPENDED
}

enum CommentStatus {
  OPEN
  RESOLVED
}

enum ReactionType {
  LIKE
  DISLIKE
  HELPFUL
  CONFUSED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum TemplateCategory {
  REQUIREMENTS
  DESIGN
  TASKS
  GENERAL
  DOMAIN_SPECIFIC
}

enum SharePermission {
  READ
  WRITE
  ADMIN
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  DOCUMENT_VIEWED
  PHASE_TRANSITIONED
  COMMENT_CREATED
  COMMENT_UPDATED
  COMMENT_RESOLVED
  AI_REVIEW_REQUESTED
  AI_SUGGESTION_APPLIED
  TEMPLATE_APPLIED
  TEMPLATE_CREATED
  COLLABORATION_JOINED
  COLLABORATION_LEFT
  CODE_EXECUTED
  LEARNING_MODULE_STARTED
  LEARNING_MODULE_COMPLETED
  EXERCISE_COMPLETED
}

enum NotificationType {
  WORKFLOW_EVENT
  COMMENT_ADDED
  COMMENT_RESOLVED
  REVIEW_REQUESTED
  REVIEW_COMPLETED
  PHASE_TRANSITION
  PROJECT_INVITATION
  TEAM_UPDATE
  AI_REVIEW_READY
  SYSTEM_ALERT
  REMINDER
}

enum DigestFrequency {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
}

enum EmailStatus {
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
}