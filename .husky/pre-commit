#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Running pre-commit checks...${NC}"

# Run lint-staged for formatting and linting
echo -e "${BLUE}📝 Running lint-staged...${NC}"
pnpm lint-staged

if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Lint-staged failed${NC}"
    exit 1
fi

# Quick TypeScript check on staged files
echo -e "${BLUE}🔍 Running TypeScript check on staged files...${NC}"

# Get staged TypeScript files
STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' | grep -v node_modules | grep -v dist)

if [ -n "$STAGED_TS_FILES" ]; then
    # Check if staged files are in client or server
    CLIENT_FILES=$(echo "$STAGED_TS_FILES" | grep '^client/' || true)
    SERVER_FILES=$(echo "$STAGED_TS_FILES" | grep '^server/' || true)
    
    # Run type check for client if client files are staged
    if [ -n "$CLIENT_FILES" ]; then
        echo -e "${BLUE}🔍 Checking client TypeScript...${NC}"
        cd client
        npm run type-check
        if [ $? -ne 0 ]; then
            echo -e "${RED}❌ Client TypeScript check failed${NC}"
            echo -e "${YELLOW}💡 Run 'cd client && npm run type-check' to see detailed errors${NC}"
            exit 1
        fi
        cd ..
    fi
    
    # Run type check for server if server files are staged
    if [ -n "$SERVER_FILES" ]; then
        echo -e "${BLUE}🔍 Checking server TypeScript...${NC}"
        cd server
        npm run type-check
        if [ $? -ne 0 ]; then
            echo -e "${RED}❌ Server TypeScript check failed${NC}"
            echo -e "${YELLOW}💡 Run 'cd server && npm run type-check' to see detailed errors${NC}"
            exit 1
        fi
        cd ..
    fi
    
    echo -e "${GREEN}✅ TypeScript checks passed${NC}"
else
    echo -e "${YELLOW}ℹ️ No TypeScript files staged${NC}"
fi

# Run a quick test if test files are staged
STAGED_TEST_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(test|spec)\.(ts|tsx|js|jsx)$' | grep -v node_modules)

if [ -n "$STAGED_TEST_FILES" ]; then
    echo -e "${BLUE}🧪 Running tests for staged test files...${NC}"
    
    # Run tests only for the staged files (if possible)
    # This is a simplified approach - in practice, you might want to run related tests
    pnpm test --passWithNoTests --findRelatedTests $STAGED_TEST_FILES
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ Tests failed${NC}"
        echo -e "${YELLOW}💡 Fix failing tests before committing${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✅ Tests passed${NC}"
fi

echo -e "${GREEN}🎉 All pre-commit checks passed!${NC}"